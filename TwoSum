brute force: O(n^2)
-----------------------
class Solution 
{
    public int[] twoSum(int[] nums, int target) 
    {
        int[] indices = new int[2];
        
        for (int i = 0; i < nums.length ; i++)
        {
            for (int j =i+1; j< nums.length; j++)
            {
                if(nums[i] + nums[j] == target)
                {
                    indices [0] = i;
                    indices [1] = j;
                    
                    break;
                }
            }
        }
        
        return indices;
    }
}

O(n) + O(n)
---------------
class Solution 
{
    public int[] twoSum(int[] nums, int target) 
    {
        Map<Integer, Integer> map = new HashMap<>();
        
        int[] result = new int[2];
        
        
        for (int i = 0; i< nums.length; i++)
        {
            int complement = target - nums[i];
            
            if(map.containsKey(complement))
            {
                result[0] = map.get(complement);
                result[1] = i;
                break;
            }
            
            map.put(nums[i],i);
        }
        
        return result;
    }
}

Analysis
nums[]  = [2,7,11,15]
target = 18

when i = 0,

for (int i = 0; i< nums.length; i++)
        {
            int complement = target - nums[i]; // complement = 18 - num[0] = 18-2 =16
            
            if(map.containsKey(complement)) // No key with the complement = 16 is found and wont enter the if block
            {
                result[0] = map.get(complement); 
                result[1] = i;
                break;
            }
            
            map.put(nums[i],i); // map will have a entry (num[0],0) which is (2, 0)
        }
        return result;

when i = 1,
for (int i = 0; i< nums.length; i++)
        {
            int complement = target - nums[i]; // complement = 18 - num[1] = 18-7 =11
            
            if(map.containsKey(complement)) // No key with the complement = 11 is found and wont enter the if block
            {
                result[0] = map.get(complement); 
                result[1] = i;
                break;
            }
            
            map.put(nums[i],i); // map will have a entry (num[1],1) which is (7, 1).
        }
        return result;

when i = 2,
for (int i = 0; i< nums.length; i++)
        {
            int complement = target - nums[i]; // complement = 18 - num[2] = 18-11 = 7
            
            if(map.containsKey(complement)) // Key with the complement = 7 is found and enter the if block
            {
                result[0] = map.get(complement); // result [0] = map.get(complement) = map.get(7) = 1(index of 7) will be inserted at the result[0] 
                result[1] = i; // i = 2 here, so result [1] = 2 which is the index of 11 and 7+11 =18 which matches  result 
                break; // loop will terminate here
            }
            
            map.put(nums[i],i); // this line wont be executed since the break statement is found.
        }
        return result; // result  will contain the indices and will be returned to its callee.



